<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mybatis.test.repo.MyNoticeMapper">
    <resultMap id="BaseResultMap" type="com.mybatis.test.model.MyNotice">
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="send_customer_id" property="sendCustomerId" jdbcType="VARCHAR"/>
        <result column="receive_customer_id" property="receiveCustomerId" jdbcType="VARCHAR"/>
        <result column="receive_status" property="receiveStatus" jdbcType="VARCHAR"/>
        <result column="remarks" property="remarks" jdbcType="VARCHAR"/>
        <result column="create_by" property="createBy" jdbcType="VARCHAR"/>
        <result column="create_date" property="createDate" jdbcType="TIMESTAMP"/>
        <result column="update_by" property="updateBy" jdbcType="VARCHAR"/>
        <result column="update_date" property="updateDate" jdbcType="TIMESTAMP"/>
        <result column="del_flag" property="delFlag" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,
        send_customer_id,
        receive_customer_id,
        receive_status,
        remarks,
        create_by,
        create_date,
        update_by,
        update_date,
        del_flag
    </sql>

    <select id="selectById" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from my_notice
        where id = #{id,jdbcType=VARCHAR}
    </select>

    <insert id="insert" parameterType="com.mybatis.test.model.MyNotice">
    insert into my_notice (
        id,
        send_customer_id,
        receive_customer_id,
        receive_status,
        remarks,
        create_by,
        create_date,
        update_by,
        update_date,
        del_flag
        )values (
        #{id,jdbcType=VARCHAR},
        #{sendCustomerId,jdbcType=VARCHAR},
        #{receiveCustomerId,jdbcType=VARCHAR},
        #{receiveStatus,jdbcType=VARCHAR},
        #{remarks,jdbcType=VARCHAR},
        #{createBy,jdbcType=VARCHAR},
        #{createDate,jdbcType=TIMESTAMP},
        #{updateBy,jdbcType=VARCHAR},
        #{updateDate,jdbcType=TIMESTAMP},
        #{delFlag,jdbcType=VARCHAR})
    </insert>

    <update id="update" parameterType="com.mybatis.test.model.MyNotice">
        update my_notice
        <set>
            <if test="sendCustomerId != null">
                send_customer_id = #{sendCustomerId,jdbcType=VARCHAR},
            </if>
            <if test="receiveCustomerId != null">
                receive_customer_id = #{receiveCustomerId,jdbcType=VARCHAR},
            </if>
            <if test="receiveStatus != null">
                receive_status = #{receiveStatus,jdbcType=VARCHAR},
            </if>
            <if test="remarks != null">
                remarks = #{remarks,jdbcType=VARCHAR},
            </if>
            <if test="createBy != null">
                create_by = #{createBy,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateBy != null">
                update_by = #{updateBy,jdbcType=VARCHAR},
            </if>
            <if test="updateDate != null">
                update_date = #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="delFlag != null">
                del_flag = #{delFlag,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=VARCHAR}
    </update>

    <delete id="delete" parameterType="java.lang.String">
        delete from my_notice
        where id IN
        <foreach collection="list" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </delete>

    <delete id="deleteByLogic" parameterType="java.lang.String">
        UPDATE my_notice SET
        del_flag = ${@com.mybatis.test.common.enumeration.DelFlagEnum@YES.getValue()},
        update_date = current_timestamp()
        WHERE id IN
        <foreach collection="list" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </delete>

    <select id="findList" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM my_notice
        <where>
            <if test="sendCustomerId != null">
                AND send_customer_id = #{sendCustomerId}
            </if>
            <if test="receiveCustomerId != null">
                AND receive_customer_id = #{receiveCustomerId}
            </if>
            <if test="receiveStatus != null">
                AND receive_status = #{receiveStatus}
            </if>
        </where>
    </select>

    <select id="getByReceiveCustomerAndStatus" resultType="com.mybatis.test.domain.FriendIdentity">
        SELECT
        a.send_customer_id as customerId,
        b.nick_name AS nickName,
        a.create_date AS createDate
        FROM
            (SELECT send_customer_id,create_date
            FROM my_notice
            WHERE receive_customer_id = #{customerId}
            AND receive_status = #{status}
            AND del_flag = ${@com.mybatis.test.common.enumeration.DelFlagEnum@NO.getValue()}) a
        INNER JOIN customer b on a.send_customer_id = b.id
        WHERE  b.del_flag = ${@com.mybatis.test.common.enumeration.DelFlagEnum@NO.getValue()}
    </select>

    <update id="updateStatusByBoth">
        UPDATE my_notice
        SET receive_status = #{newStatus}
        WHERE
        receive_customer_id = #{receiveCustomerId}
        AND send_customer_id = #{sendCustomerId}
        AND receive_status = #{oldStatus}
    </update>

    <update id="updateStatusByReceive">
        UPDATE my_notice
        SET receive_status = #{newStatus}
        WHERE
        receive_customer_id = #{receiveCustomerId}
        AND receive_status = #{oldStatus}
    </update>
</mapper>